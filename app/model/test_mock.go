// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package model

import (
	"database/sql"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDBTX creates a new instance of MockDBTX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBTX(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBTX {
	mock := &MockDBTX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBTX is an autogenerated mock type for the DBTX type
type MockDBTX struct {
	mock.Mock
}

type MockDBTX_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBTX) EXPECT() *MockDBTX_Expecter {
	return &MockDBTX_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function for the type MockDBTX
func (_mock *MockDBTX) Exec(query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = returnFunc(query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDBTX_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockDBTX_Expecter) Exec(query interface{}, args ...interface{}) *MockDBTX_Exec_Call {
	return &MockDBTX_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockDBTX_Exec_Call) Run(run func(query string, args ...interface{})) *MockDBTX_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockDBTX_Exec_Call) Return(result sql.Result, err error) *MockDBTX_Exec_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDBTX_Exec_Call) RunAndReturn(run func(query string, args ...interface{}) (sql.Result, error)) *MockDBTX_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockDBTX
func (_mock *MockDBTX) Get(dest interface{}, query string, args ...interface{}) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(dest, query, args)
	} else {
		tmpRet = _mock.Called(dest, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = returnFunc(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBTX_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDBTX_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockDBTX_Expecter) Get(dest interface{}, query interface{}, args ...interface{}) *MockDBTX_Get_Call {
	return &MockDBTX_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *MockDBTX_Get_Call) Run(run func(dest interface{}, query string, args ...interface{})) *MockDBTX_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBTX_Get_Call) Return(err error) *MockDBTX_Get_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBTX_Get_Call) RunAndReturn(run func(dest interface{}, query string, args ...interface{}) error) *MockDBTX_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NamedExec provides a mock function for the type MockDBTX
func (_mock *MockDBTX) NamedExec(query string, arg interface{}) (sql.Result, error) {
	ret := _mock.Called(query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedExec")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) (sql.Result, error)); ok {
		return returnFunc(query, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) sql.Result); ok {
		r0 = returnFunc(query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = returnFunc(query, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_NamedExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedExec'
type MockDBTX_NamedExec_Call struct {
	*mock.Call
}

// NamedExec is a helper method to define mock.On call
//   - query string
//   - arg interface{}
func (_e *MockDBTX_Expecter) NamedExec(query interface{}, arg interface{}) *MockDBTX_NamedExec_Call {
	return &MockDBTX_NamedExec_Call{Call: _e.mock.On("NamedExec", query, arg)}
}

func (_c *MockDBTX_NamedExec_Call) Run(run func(query string, arg interface{})) *MockDBTX_NamedExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBTX_NamedExec_Call) Return(result sql.Result, err error) *MockDBTX_NamedExec_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDBTX_NamedExec_Call) RunAndReturn(run func(query string, arg interface{}) (sql.Result, error)) *MockDBTX_NamedExec_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function for the type MockDBTX
func (_mock *MockDBTX) Select(dest interface{}, query string, args ...interface{}) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(dest, query, args)
	} else {
		tmpRet = _mock.Called(dest, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = returnFunc(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBTX_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockDBTX_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockDBTX_Expecter) Select(dest interface{}, query interface{}, args ...interface{}) *MockDBTX_Select_Call {
	return &MockDBTX_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *MockDBTX_Select_Call) Run(run func(dest interface{}, query string, args ...interface{})) *MockDBTX_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBTX_Select_Call) Return(err error) *MockDBTX_Select_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBTX_Select_Call) RunAndReturn(run func(dest interface{}, query string, args ...interface{}) error) *MockDBTX_Select_Call {
	_c.Call.Return(run)
	return _c
}
